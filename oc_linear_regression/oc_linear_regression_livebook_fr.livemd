# OC_linear_regression

```elixir
Mix.install([
  {:nimble_csv, "~> 1.2"},
  {:kino_vega_lite, "~> 0.1.7"},
  {:nx, "~> 0.4.1"}
])
```

## Contexte

Dans le cadre du cours "[_Initiez-vous au Machine Learning_](https://openclassrooms.com/fr/courses/4011851-initiez-vous-au-machine-learning)" d'__OpenClassrooms__, nous allons effectuer une __régression linéaire__ à partir d'un fichier CSV à deux colonnes : `loyer` et `surface`.

## Récupérer les données depuis le CSV

On utilise la librairie __NimbleCSV__ pour parser le fichier CSV, puis on stocke les valeurs dans une liste formattée pour la librairie __Vega__ (des maps avec les clés `loyer` et `surface` : les noms de futurs axes du futur graphique).

```elixir
NimbleCSV.define(CSVParser, separator: ",", escape: "\r\n")

data =
  "oc_linear_regression/house.csv"
  |> File.stream!()
  |> CSVParser.parse_enumerable()
  |> Enum.map(fn [loyer, surface] ->
    %{surface: String.to_integer(surface), loyer: String.to_integer(loyer)}
  end)
```

On enlève les __valeurs aberrantes__ ; ici il s'agit des loyers supérieurs à __10 000€__.

```elixir
data =
  data
  |> Enum.filter(fn %{loyer: loyer, surface: _surface} -> loyer < 10000 end)
```

## Générer le graphique avec Vega

```elixir
VegaLite.new(width: 750, height: 500, title: "house_chart")
|> VegaLite.data_from_values(data, only: ["surface", "loyer"])
|> VegaLite.mark(:point, filled: true, color: :green)
|> VegaLite.encode_field(:x, "surface", type: :quantitative)
|> VegaLite.encode_field(:y, "loyer", type: :quantitative)
```

__Vega__ nous permet déjà de tracer la __régression linéaire__ à partir des données issues du fichier CSV, en ajoutant simplement une nouvelle couche, contenant la fonction `transform/2`, au graphique.

```elixir
VegaLite.new(width: 750, height: 500, title: "house_chart_with_linear_regression")
|> VegaLite.data_from_values(data, only: ["surface", "loyer"])
|> VegaLite.layers([
  # couche initiale du graphique représentant les données du CSV :
  VegaLite.new()
  |> VegaLite.mark(:point, filled: true, color: :green)
  |> VegaLite.encode_field(:x, "surface", type: :quantitative)
  |> VegaLite.encode_field(:y, "loyer", type: :quantitative),

  # couche du graphique représentant la régression linéaire :
  VegaLite.new()
  |> VegaLite.mark(:line, color: :tomato)
  |> VegaLite.transform(regression: "loyer", on: "surface")
  |> VegaLite.encode_field(:x, "surface", type: :quantitative)
  |> VegaLite.encode_field(:y, "loyer", type: :quantitative)
])
```

## Calculer la droite de régression linéaire avec Nx

Avant tout calcul, nous allons d'abord retravailler la donnée de `data` - précédemment formattée en liste de _maps_ afin d'être utilisée avec __Vega__ - pour ensuite pouvoir l'utiliser avec __Nx__ (qui créé des __tenseurs__ à partir de nombres entiers et de listes d'entiers à une ou plusieurs dimensions).

On utilise donc une compréhension `for`, combinée à un `reduce`, afin de transformer toutes les maps de `data` en liste de listes grâce à la destructuration sur chacune de ces maps, ainsi que sur l'accumulateur du `reduce` qui est initialisé en amont pour être une liste bi-dimensionnelle.

```elixir
[loyer_list, surface_list] =
  for %{loyer: loyer, surface: surface} <- data, reduce: [[], []] do
    [loyer_acc, surface_acc] = _acc -> [[loyer | loyer_acc], [surface | surface_acc]]
  end
```

## Premiers tenseurs

En premier lieu, grâce à un générateur sur `loyer_list` encore une fois combiné à un `reduce`, nous crééons une liste de chiffres `1` aussi longue qu'il y a d'éléments dans `surface_list`. Cela car nous voulons ensuite créer une __matrice__ contenant autant de dimensions, chacune étant constituée du chiffre `1` et d'une surface de la liste. Nous appelons cette matrice `x`.

_N.B.: dans la librairie __Nx__, à l'image de __TensorFlow__, la fonction `tensor/2` sert autant à créer un nombre scalaire, qu'un vecteur ou une matrice._

```elixir
list_of_ones =
  for _ <- loyer_list, reduce: [] do
    acc -> [1 | acc]
  end

x = [list_of_ones, surface_list] |> Nx.tensor() |> Nx.transpose()
```

Crééons ensuite, à partir de la liste des loyers, la matrice à une seule dimension nommée `y`.

```elixir
y = loyer_list |> Nx.tensor()
```

## Le calcul de la régression linéaire

[Le cours d'OpenClassrooms](https://openclassrooms.com/fr/courses/4011851-initiez-vous-au-machine-learning/4121986-programmez-votre-premiere-regression-lineaire#/id/r-4140526) nous donne directement l'équation permettant de calculer la régression linéaire afin d'éviter d'avoir à la calculer : ![](images/linear_regression_equation.png)

Nous y retrouvons notre matrice `x` à trois reprises, ainsi que `y`.

En langage naturel, cette équation donne :

`Theta est égal à l'inverse du produit de x transposé multiplié par x, cette inverse est ensuite multiplié par x transposé, puis multipliée par y.`

Traduisons-la maintenant en langage informatique grâce aux fonctions de la librairie __Nx__.

```elixir
transposed_x = x |> Nx.transpose()

hat_theta =
  transposed_x
  |> Nx.dot(x)
  |> Nx.LinAlg.invert()
  |> Nx.dot(transposed_x)
  |> Nx.dot(y)
```

## Représentation graphique du résultat

Transformons ensuite nos deux entitées de Theta en nombres décimaux afin de les intégrer dans une liste de _maps_ utilisable par __Vega__ pour son graphique.

```elixir
[hat_theta_0, hat_theta_1] = [hat_theta[0] |> Nx.to_number(), hat_theta[1] |> Nx.to_number()]

theta_for_Vega = [
  %{x: 0, y: hat_theta_0},
  %{x: 240, y: hat_theta_0 + 240 * hat_theta_1}
]
```

```elixir
VegaLite.new(
  width: 750,
  height: 500,
  title: "house_data_with_linear_regression_calculated"
)
|> VegaLite.layers([
  # couche initiale du graphique représentant les données du CSV :
  VegaLite.new()
  |> VegaLite.data_from_values(data, only: ["surface", "loyer"])
  |> VegaLite.mark(:point, filled: true, color: :steelblue)
  |> VegaLite.encode_field(:x, "surface", type: :quantitative)
  |> VegaLite.encode_field(:y, "loyer", type: :quantitative),

  # couche du graphique représentant la régression linéaire :
  VegaLite.new()
  |> VegaLite.data_from_values(theta_for_Vega, only: ["x", "y"])
  |> VegaLite.mark(:line, color: :orange)
  |> VegaLite.encode_field(:x, "x", type: :quantitative)
  |> VegaLite.encode_field(:y, "y", type: :quantitative)
])
```

## Prédire le loyer pour une surface donnée

Grâce à nos deux variables `hat_theta_0` et `hat_theta_1`, nous pouvons ensuite prédire le loyer de n'importe quelle surface avec le calcul suivant , exemple pour 35m² :

```elixir
surface = 35

predicted_loyer = hat_theta_1 * surface + hat_theta_0
```

Un exemple du calcul de la régression linéaire utilisant l'__entraînement supervisé__ pour deviner, puis corriger via l'algorithme de la __descente de gradient__, les valeurs de `hat_theta_0` et `hat_theta_1` est disponible [ici](https://dockyard.com/blog/2021/04/08/up-and-running-nx).
